#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Servo.h>

#ifndef APSSID
#define APSSID "ESPap"
#define APPSK  "thereisnospoon"
#endif

/* Set these to your desired credentials. */
const char *ssid = APSSID;
const char *password = APPSK;

ESP8266WebServer server(80);

/* Just a little test message.  Go to http://192.168.4.1 in a web browser
   connected to this access point to see it.
*/
const String postForms = "<html>\
  <head>\
    <title>ESP8266 Web Server POST handling</title>\
    <style>\
           body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; }\
    </style>\
  </head>\
  <body>\
    <h1>Form based Range input</h1><br>\
    <form method=\"post\" enctype=\"application/x-www-form-urlencoded\" action=\"/postrange/\">\
         <label for=\"vol\">Range (between 0 and 50):</label>\
         <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"50\">\
         <input type=\"submit\" value=\"Submit\">\
    </form>\
  </body>\
</html>";

void handleRoot() {
  server.send(200, "text/html",postForms);

}

void handlePlain() {
  if (server.method() != HTTP_POST) {
    //digitalWrite(led, 1);
    server.send(405, "text/plain", "Method Not Allowed");
    //digitalWrite(led, 0);
  } else {
   // digitalWrite(led, 1);
    server.send(200, "text/plain", "POST body was:\n" + server.arg("plain"));
   // digitalWrite(led, 0);
  }
}

void handleForm() {
  if (server.method() != HTTP_POST) {
    //digitalWrite(led, 1);
    server.send(405, "text/plain", "Method Not Allowed");
   // digitalWrite(led, 0);
  } else {
 // digitalWrite(led, 1);

    String message = "POST form was:\n";
    Serial.print("message");
    for (uint8_t i = 0; i < server.args(); i++) {
      message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
    }
 
    server.send(200, "text/plain", message);
   // digitalWrite(led, 0);
  }
}

void handleRange() {
  digitalWrite(14, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(13, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(12, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(3, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(1, LOW);   // Turn the LED on (Note that LOW is the voltage level
  Serial.println("In handleRange");
  if (server.method() != HTTP_POST) {
    //digitalWrite(led, 1);
    server.send(405, "text/plain", "Method Not Allowed");
   // digitalWrite(led, 0);
  } else {
 // digitalWrite(led, 1);
    int val=0;
    String message = "POST Range was:\n";
    for (uint8_t i = 0; i < server.args(); i++) {
      message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
    }
    Serial.println(message);
    val = server.arg(0).toInt();
    Serial.print("Value is :");
    Serial.println(val);
 
    if(val <=10)
    {
      digitalWrite(14, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    }
    else if (val >10 && val <=20)
    {
       digitalWrite(14, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(13, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    }
    else if (val >20 && val <=30)
    {
       digitalWrite(14, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(13, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(12, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    }
     else if (val >30 && val <=40)
    {
       digitalWrite(14, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(13, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(12, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(3, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    }
    else
    {
       digitalWrite(14, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(13, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(12, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(3, HIGH);   // Turn the LED on (Note that LOW is the voltage level
       digitalWrite(1, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    }
    server.send(200, "text/html", postForms);
   // digitalWrite(led, 0);
  }
}

void handlejQuery()
{
  Serial.println("message from handleQuery");
/*  server.send(200, "application/js", jquery_js); */
}

void setup() {
  delay(1000);
  Serial.begin(115200);
  Serial.println();
  Serial.print("Configuring access point...");
  /* You can remove the password parameter if you want the AP to be open. */
  WiFi.softAP(ssid, password);

  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  server.on("/", handleRoot);
  server.on("/postplain/", handlePlain);
  server.on("/postform/", handleForm);
  server.on("/postrange/", handleRange);
  server.on("/jquery.min.js/", handlejQuery);
  pinMode(14, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(13, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(12, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(3, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(1, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  digitalWrite(14, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(13, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(12, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(3, LOW);   // Turn the LED on (Note that LOW is the voltage level
  digitalWrite(1, LOW);   // Turn the LED on (Note that LOW is the voltage level
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}